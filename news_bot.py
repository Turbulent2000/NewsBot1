import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import feedparser
import sqlite3
from gtts import gTTS  # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests  # –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = "7819794470:AAFzom825LhumYjjAhbxkAGFh5r0zD4n3ms"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# RSS-–ª–µ–Ω—Ç—ã
RSS_FEEDS = {
    "BBC News": "http://feeds.bbci.co.uk/news/rss.xml",
    "Reuters": "http://feeds.reuters.com/reuters/topNews",
    "TechCrunch": "https://techcrunch.com/feed/",
    "–õ–µ–Ω—Ç–∞.—Ä—É": "https://lenta.ru/rss",
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    keywords TEXT DEFAULT '',
    voice_enabled INTEGER DEFAULT 0
)
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
    conn.commit()
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/news ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/add_keyword ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/keywords ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/enable_voice ‚Äî –≤–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/disable_voice ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/popular_news ‚Äî —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏"
    )

# –§—É–Ω–∫—Ü–∏—è: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
@dp.message_handler(commands=["news"])
async def send_filtered_news(message: types.Message):
    cursor.execute("SELECT keywords FROM users WHERE user_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    keywords = result[0].split(",") if result and result[0] else []

    response = "üì∞ *–í–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
    for source, url in RSS_FEEDS.items():
        feed = feedparser.parse(url)
        response += f"üìç *{source}*\n"
        for entry in feed.entries[:5]:
            if not keywords or any(keyword.lower() in entry.title.lower() for keyword in keywords):
                response += f"- [{entry.title}]({entry.link})\n"
        response += "\n"
    await message.reply(response, parse_mode=ParseMode.MARKDOWN)

# –§—É–Ω–∫—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
@dp.message_handler(commands=["add_keyword"])
async def add_keyword(message: types.Message):
    keyword = message.get_args()
    if keyword:
        cursor.execute("SELECT keywords FROM users WHERE user_id = ?", (message.from_user.id,))
        result = cursor.fetchone()
        current_keywords = result[0] if result else ""
        new_keywords = f"{current_keywords},{keyword}" if current_keywords else keyword
        cursor.execute("UPDATE users SET keywords = ? WHERE user_id = ?", (new_keywords, message.from_user.id))
        conn.commit()
        await message.reply(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

# –§—É–Ω–∫—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message_handler(commands=["enable_voice"])
async def enable_voice(message: types.Message):
    cursor.execute("UPDATE users SET voice_enabled = 1 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.reply("–ì–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –Ω–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≥–æ–ª–æ—Å–æ–º.")

# –§—É–Ω–∫—Ü–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message_handler(commands=["disable_voice"])
async def disable_voice(message: types.Message):
    cursor.execute("UPDATE users SET voice_enabled = 0 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.reply("–ì–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# –§—É–Ω–∫—Ü–∏—è: —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π API (–ø—Ä–∏–º–µ—Ä –Ω–∞ NewsAPI)
@dp.message_handler(commands=["popular_news"])
async def send_popular_news(message: types.Message):
    api_key = "ed2d6eaa94194ed28539ab41fe481f49"  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://newsapi.org
    url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={api_key}"
    response = requests.get(url).json()
    
    if response.get("articles"):
        news = "üî• *–¢–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
        for article in response["articles"][:5]:
            news += f"- [{article['title']}]({article['url']})\n"
        await message.reply(news, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (—Å –≥–æ–ª–æ—Å–æ–º)
async def send_daily_news():
    cursor.execute("SELECT user_id, keywords, voice_enabled FROM users")
    users = cursor.fetchall()
    for user_id, keywords, voice_enabled in users:
        keywords_list = keywords.split(",") if keywords else []
        response = "üì∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
        for source, url in RSS_FEEDS.items():
            feed = feedparser.parse(url)
            response += f"üìç *{source}*\n"
            for entry in feed.entries[:3]:
                if not keywords_list or any(keyword.lower() in entry.title.lower() for keyword in keywords_list):
                    response += f"- {entry.title}\n{entry.link}\n"
            response += "\n"
        
        if voice_enabled:
            tts = gTTS(response, lang="ru")
            tts.save("daily_news.mp3")
            await bot.send_audio(user_id, audio=open("daily_news.mp3", "rb"))
        else:
            await bot.send_message(user_id, response, parse_mode=ParseMode.MARKDOWN)

scheduler.add_job(send_daily_news, "interval", hours=24)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)